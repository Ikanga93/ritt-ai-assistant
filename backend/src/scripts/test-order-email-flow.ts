/**
 * Single Payment Link Email Test
 * 
 * This script sends a single payment link email:
 * 1. Create a temporary order
 * 2. Generate a payment link with email notification
 */

import * as dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';
import * as logger from '../utils/logger.js';
import { temporaryOrderService } from '../services/temporaryOrderService.js';
import { generateOrderPaymentLink } from '../services/orderPaymentLinkService.js';
import { sendPaymentReceiptEmail } from '../services/orderEmailService.js';
import { generateEmailDeliveryReport } from '../services/emailService.js';

// Load environment variables from .env.local
dotenv.config({ path: '.env.local' });

// Get the directory name of the current module
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Set up console output formatting for better readability
const consoleLog = console.log;
console.log = (...args) => {
  if (typeof args[0] === 'string' && args[0].startsWith('üß™')) {
    consoleLog('\n' + '='.repeat(80));
    consoleLog(...args);
    consoleLog('='.repeat(80));
  } else {
    consoleLog(...args);
  }
};

/**
 * Run the end-to-end test for order flow with emails
 */
async function testOrderEmailFlow() {
  // Get the test email from command line arguments or environment variables
  const testEmail = process.argv[2] || process.env.TEST_EMAIL;
  
  if (!testEmail) {
    console.error('‚ùå No test email provided');
    console.error('Usage: pnpm tsx src/scripts/test-order-email-flow.ts <test-email>');
    return;
  }
  
  console.log(`üß™ Testing order flow with email notifications to: ${testEmail}`);
  
  try {
    // Step 1: Create a temporary order
    console.log('\nüìù Step 1: Creating a temporary order...');
    
    const testOrder = temporaryOrderService.storeOrder({
      customerName: 'Test Customer',
      customerEmail: testEmail,
      restaurantId: 'rest-123',
      restaurantName: 'Test Restaurant',
      items: [
        { id: 'item-1', name: 'Burger', price: 9.99, quantity: 1 },
        { id: 'item-2', name: 'Fries', price: 3.99, quantity: 2 },
        { id: 'item-3', name: 'Drink', price: 2.49, quantity: 1 }
      ],
      subtotal: 20.46,
      tax: 1.64,
      total: 22.10
    });
    
    console.log(`‚úÖ Created temporary order with ID: ${testOrder.id}`);
    console.log(`   Customer: ${testOrder.customerName} (${testOrder.customerEmail})`);
    console.log(`   Restaurant: ${testOrder.restaurantName}`);
    console.log(`   Total: $${testOrder.total.toFixed(2)}`);
    
    // Step 2: Generate a payment link with email notification
    console.log('\nüí∞ Step 2: Generating payment link with email notification...');
    
    const orderWithPayment = await generateOrderPaymentLink({
      orderId: testOrder.id,
      customerEmail: testOrder.customerEmail,
      customerName: testOrder.customerName,
      description: `Test order from ${testOrder.restaurantName}`,
      expirationHours: 48
    });
    
    // Check if payment link was generated by looking at metadata
    const paymentLinkData = orderWithPayment.metadata?.paymentLink;
    
    if (!paymentLinkData || !paymentLinkData.url) {
      throw new Error('Failed to generate payment link');
    }
    
    // Add the payment link to the orderWithPayment object for easier access
    orderWithPayment.paymentLink = paymentLinkData;
    
    console.log(`‚úÖ Generated payment link: ${orderWithPayment.paymentLink?.url}`);
    
    // Check if email was sent
    const emailStatus = orderWithPayment.metadata?.emailStatus;
    
    if (emailStatus?.paymentLinkEmailSent) {
      console.log(`‚úÖ Payment link email sent successfully`);
      console.log(`   Message ID: ${emailStatus.paymentLinkEmailMessageId}`);
      console.log(`   Sent at: ${new Date(emailStatus.paymentLinkEmailSentAt || 0).toLocaleString()}`);
    } else {
      console.warn(`‚ö†Ô∏è Payment link email was not sent`);
      if (emailStatus?.paymentLinkEmailError) {
        console.error(`   Error: ${emailStatus.paymentLinkEmailError}`);
      }
    }
    
    // Test complete
    console.log('\n‚úÖ Test completed successfully!');
    console.log(`Check your email inbox for the payment link email.`);
    console.log(`Payment link URL: ${orderWithPayment.paymentLink?.url}`);
    console.log(`\nIMPORTANT: This is a test payment link. It will work for testing the payment flow.`);
    
    console.log('\n‚úÖ End-to-end test completed successfully!');
    console.log('Check your email inbox for the test emails.');
    
  } catch (error) {
    console.error('\n‚ùå Error during end-to-end test:', error);
  }
}

// Run the test
testOrderEmailFlow().catch(error => {
  console.error('‚ùå Fatal error:', error);
  process.exit(1);
});

// Display usage instructions
console.log(`
Usage: 
  pnpm tsx src/scripts/test-order-email-flow.ts [test-email]
  
  test-email: Email address to send test emails to (optional if TEST_EMAIL is set in .env.local)
`);
